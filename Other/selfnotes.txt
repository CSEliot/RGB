Disclaimer: These are notes to myself, nobody has to read this. In fact,
please don't, possible spoilers ahead.

Creative Mode: WILL NOT BE ACCESSIBLE IN THE FINAL VERSION (hidden).
 
STAR TIME RIGHT: when pressing left/right, the ring opens&loses really quickly

NEED TO ADD SEIZURE WARNING-ING-ING

creative:
for RGB, have a status comparing the 3 colors. if there is a change, send a new 
action through, and if RGB is (0,0,0), then, before the next action, create a
Wait action. For the stars . . .


Previewing circles: much like in other rhythm games, I want to give the player
time to react to incoming circles, so I think it'd be best to have them spawn
and then grow slowly, exponentially, and achieve the same time.

stars are used only for long and legatio music, represented by the movement of 
the ring. also, stars rotate slower when moving slower.

SPRITEMASKS FOR COLLISION

commanderRunner: So, to ascertain how long we wait till DOING the next command,
if we get a command that asks for a change in wait time, it'll change it 
immediately, and bump the list iterator up one, so as to pass over the W command.
For example, the command CR WC2, 
Also, we need to make sure that the first action after play is not delayed.
So, we could have a variable, boolean, that says isFirst, and IF isFirst, 
set isPlaying to true.

More gameplay aspects. If the player misses the circle, it will continue to 
expand, then slowly fade away, maybe expand away FAST OR maybe slow?
, maybe whole circle will fade. . . which means I won't need the fadeBG idea. . .
if they DONT miss, the circle recedes a little, then stops. 

AUTO COLORS: Kinda like a venn diagram, as in, certain tones create certain 
colors, and in between is a mix.

How to work the action commands:
the wait time will be a multiplier.
For each frame, we will test if == to FPS., times a multiplier.
Ex: frame*(wait) >= FPS.
So if the BPM is 60, the wait is one, so we have to wait 30 frames to perform
an action, and since there are 30 frames per second, the action will be 
performed in 1 second. If the BPM is 30, then the wait = 0.5. Meaning in order
for the frame to == FPS, we need 60 frames, meaning the wait is 2 seconds long.
In order to calculate, lets take an example of BPM300. 300/60 = 5 beats per
second. So, if (frame)*(5) >= FPS. Every 6th frame will produce an action, in
total, after 30 frames, the frame variable would've been reset 5 times, and
5 actions would be produced in under 1 second.
Equation for wait = BPM/60.
But what if the user gives us a speed? Ex: CSP2 means if a circle size to hit 
the ring is 500, then for every frame, if there are 30 frames to get to 500, 
then the circle should grow at 500/(30*2) units each frame, so in 2 seconds, the 
circle will be 500 units. 
Equation for circle growth speed = ring_size/(FPS*x) where x is the user given
speed.
Equation for star move speed = ring_size/(FPS*x) where ix is the given speed.
But how do we get x if we only have BPM? If we have 60 beats per minute, or 1
beat per second, then the speed of the circle is 1 ring reached per second.
For wait time, if a user gives us a wait time specific to a star or circle,
then we have to have each instruction check to see if frame *(wait) >= FPS
So the for loop to check actions will probably be:
# the command_list is a list of lists. Each list within the command list begins
# with the option, then the rest are the corresponding commands.
location = -1
for command in command list:
	#the location is the index of the current command
	location += 1
	# option 0 is the create circle command (probably won't be)
	if command == 0:   
		if frame*(cwait) >= FPS:
			if command_list[location][0]:
				r = 255
			if command_list[location][1]:
				g = 255
			if command_list[location][2]:
				b = 255
			if not(command_list[location][3] == None):
				temp_speed = command_list[location][3]
			else:
				temp_speed = cSpeed
			circ(temp_cSpeed, (r, g, b), image).add(allSprites, circSprites)
			frame = 0
	# this will make a star
	elif command == 1:
		if frame*(fwait) >= FPS:
			fAngle = command_list[location][0]
			if not(command_list[location][1] == None):
				temp_fSpeed	= command_list[location][1]
			else:
			 	temp_fSpeed = fSpeed		
			star(temp_fSpeed, fAngle).add(allSprites, starSprites)
			frame = 0
	# this is the BPM, setting the WG, CSP, and FSP
	elif command == 2:
		# wait time is BPM/60, aka wait time per second, setting WG here.
		cWait, fWait = command_list[location][0]/60
		# setting the CSP here
		cSpeed = Ring.collide_size/(FPS/(command_list[location][0]/60))
		frame = 0
	###########################
		
			
			
So the max number of actions per second is 30, but it is not recommended.

Learn:
	SUBSURFACES FOR BACKGROUND AND DIRTYRECTS FOR EVERYTHING ELSE
New gameplay element ideas: 
	up and down rotate a whole ninety degrees, smoothly.
	possibly accomplishable by using modulus by 90, and easing in to it.

	A video playing in the background, circles will be slightly opaque.


Visual Feedback: 
	"""NOTE: CIRCLES DO NOT SHOOT TILL YOU GET A RIGHT CIRCLE COLOR!!
		OR
	The circles will be a bit brighter when you're right, 
	and a bit darker when you're wrong.
	
	THE STARS' BRIGHTNESS!!!

Backstory:
	It is the year 00000000000.1 of all time and the Universe is just beginning! 
	The very fabrics of color are now being spread throughout the universe! 
	It is your job to catch these colors. In doing so, the 3rd dimension will 
	slowly be created and EXPLODE from the center of the Universe. 
	You must catch these 3D objects, also known as CUBES, with your 
	Apply Rift Riding Oscilator of Wisdom, aka A.R.R.O.W., 
	by rotating it to the cubes, so that the Universe can be organized into a 
	3D space of colors and things!!

Music:
	temporary placeholder: FFXI OST- RuLude Gardens OR a ratatat piece.

Circle Quality:
Currently, there ARE ways to draw an antialiased filled circle in pygame,
but it involves complicated algorithms and CPU drain,
so what I might do is just have a .png for each colored circle, 
have it HUGE, then size it down with transform.rotozoom, and have it 
enlarge back up to it's original .png size.


Randomizer: 
Once the Color AI is installed, it will work like this:
All current code will require minimum changes.
The AI will randomyl change a list of R, G and B. 
it will swap out R, G, or B with 0.
So the if statements will detect if list[0] has R, etc.
It will not use the same color twice. 
At the end of the AI's code, it will set current list = to old_list.
old_list will then be compared to the list upon AI rerun, and if equal, rerun the AI again.
(yes i know it isn't technically AI)

Circle lists:
When dealing with human controls, a new circle will be created each time there is input, so while holding down input, continuous 
circles are created. This lowers framerate, but will not be a problem once the AI is handling circle generation.


Code Dump:
	
    new_event_list = None
        old_event_list = pygame.event.get()
        if old_event_list == new_event_list:
            print 'events are the same!'
        else:
            print 'events are not the same'
            new_event_list = old_event_list
       new_event_list = pygame.event.get()






    """if direction == 'right':
        catx += 5
        if catx == 280:
            direction = 'down'
    elif direction == 'down':
        caty += 5
        if caty == 220:
            direction = 'left'
    elif direction == 'left':
        catx -= 5
        if catx == 10:
            direction = 'up'
    elif direction == 'up':
        caty -= 5
        if caty == 10:
            direction = 'right'"""
